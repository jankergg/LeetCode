圆环回原点问题是字节跳动高频面试题，首先引用几个涉及本题的面经原文

[1]0-12共13个数构成一个环，从0出发，每次走1步，走n步回到0共有多少种走法（2020.09 字节跳动-广告-后端）
[2]0-8组成一个圆环，从0出发，每次可以逆时针和顺时针走，走n步能回到0有多少种情况（2020.09 字节跳动-people-后端）
[3]0~9的环，从0出发，N步后能否走回0。（2020.07 字节跳动-电商-后端）
[4]圆环回原点问题 (2020.08 字节跳动-飞书-后端)

圆环上有10个点，编号为0~9。从0出发，每次可以逆时针和顺时针走一步，问走n步回到0共有多少种走法。

输入: 2
输出: 2
解释：有2种方案。分别是0->1->0和0->9->0

本题考察动态规划。经过分析可知：走n步到0的方案数=走n-1步到1的方案数+走n-1步到9的方案数。
因此，如果设dp[n][i]为走n步到i的方案数，则动态规划的递推式为：

[公式]
公式之所以取余是因为i-1或i+1可能会超过圆环0~9的范围

class Solution:
    def backToOrigin(self,n):
        #点的个数为10
        length = 10
        dp = [[0 for i in range(length)] for j in range(n+1)]
        dp[0][0] = 1
        for i in range(1,n+1):
            for j in range(length):
                #dp[i][j]表示从0出发，走i步到j的方案数
                dp[i][j] = dp[i-1][(j-1+length)%length] + dp[i-1][(j+1)%length]
        return dp[n][0]
